import matchPath from './match-path';
declare function nextTick(cb: any, ctx: any): Promise<unknown> | undefined;
declare function innumerable(obj: any, key: any, value: any, options?: {
    configurable: boolean;
}): any;
declare function normalizePath(path: any): any;
declare function normalizeRoute(route: any, parent: any, depth: number | undefined, force: any): any;
declare function normalizeRoutes(routes: any, parent: any, depth?: number, force?: boolean): any;
declare function normalizeRoutePath(path: any, route: any, append: any, basename?: string): any;
declare function matchRoutes(routes: any, to: any, parent: any, branch: any): any;
declare function normalizeLocation(to: any, route: any, append: any, basename?: string): any;
declare function isPlainObject(obj: any): boolean;
declare function isFunction(value: any): boolean;
declare function isLocation(v: any): any;
declare function normalizeProps(props: any): any;
declare function once(fn: any, ctx: any): (...args: any[]) => any;
declare function isAcceptRef(v: any): boolean;
declare function mergeFns(...fns: any[]): (...args: any[]) => undefined;
declare function resolveRedirect(to: any, route: any, from: any): any;
declare function warn(...args: any[]): void;
declare function afterInterceptors(interceptors: any, ...args: any[]): Promise<void>;
declare function renderRoute(route: any, routes: any, props: any, children: any, options?: {}): any;
declare function flatten(array: any): any[];
declare function camelize(str: any): any;
declare function isPropChanged(prev: any, next: any): boolean;
declare function isRouteChanged(prev: any, next: any): boolean;
declare function isRoutesChanged(prevs: any, nexts: any): boolean;
declare function getHostRouterView(ctx: any, continueCb: any): any;
declare function getParentRoute(ctx: any): any;
declare function isAbsoluteUrl(to: any): boolean;
export { camelize, flatten, warn, once, mergeFns, isAcceptRef, nextTick, isPlainObject, isFunction, isLocation, isPropChanged, isRouteChanged, isRoutesChanged, isAbsoluteUrl, resolveRedirect, normalizePath, normalizeRoute, normalizeRoutes, normalizeRoutePath, normalizeLocation, normalizeProps, matchPath, matchRoutes, renderRoute, innumerable, afterInterceptors, getParentRoute, getHostRouterView };
